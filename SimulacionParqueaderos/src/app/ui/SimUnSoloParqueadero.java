/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.ui;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;

/**
 *
 * @author alejandrofranco
 */

public class SimUnSoloParqueadero extends javax.swing.JDialog {

    // Defecto: Capacidad de 15 cupos de parqueadero (15 servidores)
    private int capacidadParqueadero = 15;
    // Defecto: m/m/s
    private int tipoDeSimulacion = 1; 
    // Defecto: Tasa de llegada en 0 vehículos por hora
    private int lambda = 0;
    // Defecto: Tasa de servicio en 0 vehículos por hora
    private int miu = 0;
    // Panel de parámetros activado por defecto
    private boolean activarDesactivarPanelParametros = true;
    
    public SimUnSoloParqueadero(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Ubica en el centro la ventana por defecto
        this.setLocationRelativeTo(null);
        // Pone el panel de simulación por defecto
        restablecerPanelResultadosSimulación(capacidadParqueadero);
        restablecerPanelParametrosSimulación();
        //crearSimulacionTxt();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RGBTipoParqueadero = new javax.swing.ButtonGroup();
        RBGTipoSimulacion = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        RBPequeño = new javax.swing.JRadioButton();
        RBMediano = new javax.swing.JRadioButton();
        RBGrande = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SpinnerLambda = new javax.swing.JSpinner();
        SpinnerMiu = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        RBmms = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        ButtonSimular = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        SpinnerN = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        ButtonSimularTodoMMS = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        Label_L = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Label_Lq = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Label_W = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Label_Wq = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Label_Ro = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Label_Pw = new javax.swing.JLabel();
        Label_Estado = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextAreaProbabilidades = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Un solo Parqueadero");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parámetros de la Simulación", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Tipo de parqueadero");

        RGBTipoParqueadero.add(RBPequeño);
        RBPequeño.setSelected(true);
        RBPequeño.setText("Pequeño (Capacidad de 15 vehículos)");
        RBPequeño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBPequeñoActionPerformed(evt);
            }
        });

        RGBTipoParqueadero.add(RBMediano);
        RBMediano.setText("Mediano (Capacidad de 42 vehíclulos)");
        RBMediano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBMedianoActionPerformed(evt);
            }
        });

        RGBTipoParqueadero.add(RBGrande);
        RBGrande.setText("Grande (Capacidad de 90 vehículos)");
        RBGrande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBGrandeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("λ");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("μ");

        SpinnerLambda.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        SpinnerMiu.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 15));

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Tipo de Simulación");

        RBGTipoSimulacion.add(RBmms);
        RBmms.setSelected(true);
        RBmms.setText("m/m/s");
        RBmms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBmmsActionPerformed(evt);
            }
        });

        RBGTipoSimulacion.add(jRadioButton2);
        jRadioButton2.setText(".. / .. / ..");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("Tasa de Llegada, de Servicio y n => Pn");

        ButtonSimular.setText("S. Manual");
        ButtonSimular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSimularActionPerformed(evt);
            }
        });

        jLabel6.setText("Vehículos x Hora");

        jLabel7.setText("Min. prom. esp. ocupado");

        jLabel21.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel21.setText("n");

        SpinnerN.setModel(new javax.swing.SpinnerNumberModel());

        jLabel22.setText("Vehículos en el Sistema");

        ButtonSimularTodoMMS.setText("S. Todo m/m/s");
        ButtonSimularTodoMMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSimularTodoMMSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBPequeño)
                    .addComponent(RBMediano)
                    .addComponent(RBGrande))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4)
                                    .addComponent(RBmms)
                                    .addComponent(jRadioButton2)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(SpinnerLambda))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(SpinnerMiu, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(ButtonSimularTodoMMS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ButtonSimular))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpinnerN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RBPequeño)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RBMediano)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RBGrande)
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RBmms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addGap(1, 1, 1)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SpinnerLambda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(SpinnerMiu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(SpinnerN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonSimular)
                    .addComponent(ButtonSimularTodoMMS)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resultados de la Simulación", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("L=");

        Label_L.setText("0.0");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Lq=");

        Label_Lq.setText("0.0");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("W=");

        Label_W.setText("0.0");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Wq=");

        Label_Wq.setText("0.0");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Ro=");

        Label_Ro.setText("0.0");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Pw=");

        Label_Pw.setText("0.0");

        Label_Estado.setBackground(new java.awt.Color(0, 153, 0));
        Label_Estado.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        Label_Estado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_Estado.setText("0/15");
        Label_Estado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Label_Estado.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_Estado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Label_L, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Label_Lq, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Label_W, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Label_Wq, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Label_Ro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Label_Pw, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Label_Estado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(Label_L))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(Label_Lq))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(Label_W))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(Label_Wq))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(Label_Ro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(Label_Pw))
                .addGap(15, 15, 15))
        );

        TextAreaProbabilidades.setColumns(20);
        TextAreaProbabilidades.setRows(5);
        TextAreaProbabilidades.setText("P0= 0.0 => 0%\nP1= 0.0 => 0%\nP2= 0.0 => 0%\n...\n...\n...\n...\nPn= 0.0 => 0%");
        jScrollPane1.setViewportView(TextAreaProbabilidades);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Convenciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        jLabel14.setText("L: Valor esperado de número de vehículos en el sistema.");

        jLabel15.setText("Lq: Valor esperado de número de vehículos en la cola.");

        jLabel16.setText("W: Tiempo medio de espera en el sistema.");

        jLabel17.setText("Wq: Tiempo medio de espera en la cola.");

        jLabel18.setText("Ro: Factor de utilización del sistema (intensidad de tráfico).");

        jLabel19.setText("Pn: Probabilidad de que n vehículos estén en el sistema.");

        jLabel20.setText("Pw: Probabilidad de que un nuevo vehículo tenga que esperar.");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RBPequeñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBPequeñoActionPerformed
        // TODO add your handling code here:
        capacidadParqueadero = 15;
        Label_Estado.setText("0/" + String.valueOf(capacidadParqueadero));
        Label_Estado.setBackground(new Color(0, 153, 0));
    }//GEN-LAST:event_RBPequeñoActionPerformed

    private void RBGrandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBGrandeActionPerformed
        // TODO add your handling code here:
        capacidadParqueadero = 90;
        Label_Estado.setText("0/" + String.valueOf(capacidadParqueadero));
        Label_Estado.setBackground(new Color(0, 153, 0));
    }//GEN-LAST:event_RBGrandeActionPerformed

    private void RBMedianoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBMedianoActionPerformed
        // TODO add your handling code here:
        capacidadParqueadero = 42;
        Label_Estado.setText("0/" + String.valueOf(capacidadParqueadero));
        Label_Estado.setBackground(new Color(0, 153, 0));
    }//GEN-LAST:event_RBMedianoActionPerformed

    private void RBmmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBmmsActionPerformed
        // TODO add your handling code here:
        tipoDeSimulacion = 1; // Es una simulación tipo MMS
    }//GEN-LAST:event_RBmmsActionPerformed

    private void ButtonSimularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSimularActionPerformed
        // Capturo lambda y miu de la UI
        lambda = (Integer)(SpinnerLambda.getValue());
        miu = (Integer) SpinnerMiu.getValue();
        // Comienza la simulación
        if(RBmms.isSelected()){
            if(activarDesactivarPanelParametros){ // Simulando
                // ponerCalculosUIMMS((double)lambda, (double)miu, capacidadParqueadero, (Integer)SpinnerN.getValue(), 4); // Lambda, Miu, Servidores, n_vehículo(Pn), Cifras significativas
                ponerCalculosUIMMS((double)lambda, 60.0/(double)miu, capacidadParqueadero, (Integer)SpinnerN.getValue(), 4); // Lambda, Miu, Servidores, n_vehículo(Pn), Cifras significativas
                desactivarPanelParametros(false);
                ButtonSimular.setText("N. Simulación");
                activarDesactivarPanelParametros = false;
            }else{ // Nueva Simulación
                activarPanelParametros(true);
                capacidadParqueadero = 15;
                restablecerPanelResultadosSimulación(capacidadParqueadero);
                //restablecerPanelParametrosSimulación();
                ButtonSimular.setText("S.Manual");
                activarDesactivarPanelParametros = true;
            }
        }else{
            System.out.println("En construcción ...");
        }
        
    }//GEN-LAST:event_ButtonSimularActionPerformed

    private void ButtonSimularTodoMMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSimularTodoMMSActionPerformed

        double l = 1; // Lambda
        double min = 15; // Minutos => 15 min defecto
        double m = 0; // Miu => 0 por defecto
        int s = capacidadParqueadero; // Nº Servidores
        int cs = 4; // Cantidad de cifras significativas
        double Ro, Po, Lq, Wq, W, L, Pw;
        
        // Cálculo inicial de Miu y Ro
        m = 60.0/min;
        Ro = redondearDecimales(intencidadDeTraficoMMS(l, m, s), cs);
        // Limpia el archivo totalmente antes de iniciar una nueva simulación
        limpiarSimulacionTxtMMS();
        while (Ro < 1 && min <= 180){
            Po = redondearDecimales(PoMMS(l, m, s, Ro), cs);
            Lq = redondearDecimales(LqMMS(l, m, s, Po, Ro), cs);
            Wq = redondearDecimales(WqMMS(Lq, l), cs);
             W = redondearDecimales(WMMS(Wq, m), cs);
             L = redondearDecimales(LMMS(l, W), cs);
            Pw = redondearDecimales(PwMMS(l, m, s, Po, Ro), (cs-2));
            System.out.println(""+s+" "+l+" "+min+" "+Ro+" "+L+" "+Lq+" "+W+" "+Wq+" "+Po+" "+Pw);
            // Crea una nueva simulación y la guarda cada iteración
            crearSimulacionTxtMMS(s, l, min, Ro, L, Lq, W, Wq, Po, Pw);
            l ++;
            Ro = redondearDecimales(intencidadDeTraficoMMS(l, m, s), cs);
            if(Ro >= 1){
                l = 1;
                min += 15; // Intervalos de a 15 minutos de ocuapación
                m = 60.0/min;
                Ro = redondearDecimales(intencidadDeTraficoMMS(l, m, s), cs);
            }
        }
        
        
    }//GEN-LAST:event_ButtonSimularTodoMMSActionPerformed
    
    // Desactiva el panel de parámetros
    public void desactivarPanelParametros(boolean desactivar){
        jPanel1.setEnabled(desactivar);
        RBPequeño.setEnabled(desactivar);
        RBMediano.setEnabled(desactivar);
        RBGrande.setEnabled(desactivar);
        RBmms.setEnabled(desactivar);
        jRadioButton2.setEnabled(desactivar);
        SpinnerLambda.setEnabled(desactivar);
        SpinnerMiu.setEnabled(desactivar);
        SpinnerN.setEnabled(desactivar);
        ButtonSimularTodoMMS.setEnabled(desactivar);
    }
    // Activa el panel de parámetros
    public void activarPanelParametros(boolean activar){
        jPanel1.setEnabled(activar);
        RBPequeño.setEnabled(activar);
        RBMediano.setEnabled(activar);
        RBGrande.setEnabled(activar);
        RBmms.setEnabled(activar);
        jRadioButton2.setEnabled(activar);
        SpinnerLambda.setEnabled(activar);
        SpinnerMiu.setEnabled(activar);
        SpinnerN.setEnabled(activar);
        ButtonSimularTodoMMS.setEnabled(activar);
    }
    // Restablecer panel de parámetros de simulación
    private void restablecerPanelParametrosSimulación(){
        RBPequeño.setSelected(true);
        RBmms.setSelected(true);
        SpinnerLambda.setValue(0);
        SpinnerMiu.setValue(0);
        SpinnerN.setValue(0);
    }
    // Restablecer panel de Resultados de simulación
    private void restablecerPanelResultadosSimulación(int s){
        Label_Estado.setText("0/" + String.valueOf(s));
        Label_Estado.setBackground(new Color(0, 153, 0));
        Label_L.setText("0.0");
        Label_Lq.setText("0.0");
        Label_W.setText("0.0");
        Label_Wq.setText("0.0");
        Label_Ro.setText("0.0");
        Label_Pw.setText("0.0");
        TextAreaProbabilidades.setText("");
        for(int i = 0; i < 8; i++){
            if(i < 3){
                TextAreaProbabilidades.append("P"+i+" = 0.0 => 0%\n");
            }else if(i > 2 && i < 7){
                TextAreaProbabilidades.append("... \n");
            }else{
                TextAreaProbabilidades.append("Pn = 0.0 => 0%\n");
            }
        }
    }
    // ro: Intensidad de tráfico MMS
    public double intencidadDeTraficoMMS(double lambda, double miu, int servidores){
        return lambda / (servidores * miu);
    }
    // Po: Probabilidad de que es sistema este vacío MMS
    public double PoMMS(double lambda, double miu, int servidores, double intencidadDeTrafico){
        
        double a=0, b=0;
        // SUM n=0 hasta S-1 de: ((lambda/miu)^2)/n!
        for(int n = 0; n < servidores; n++){
            a += Math.pow((lambda/miu), n)/factorial(n).doubleValue();
        }
        // (lambda/miu)^servidores / (servidores ! * (1 - ro))
        b = Math.pow((lambda/miu), servidores) / (factorial(servidores).doubleValue() * (1 - intencidadDeTrafico));
        
        return 1/(a+b);
    }
    // Lq: Valor esperado de número de clientes en la cola MMS
    public double LqMMS(double lambda, double miu, int servidores, double Po, double intencidadDeTrafico){
        return (Math.pow((lambda/miu), servidores) * Po * intencidadDeTrafico)/(factorial(servidores).doubleValue() * Math.pow((1 - intencidadDeTrafico), 2));
    }
    // Wq: Tiempo medio de espera en la cola MMS
    public double WqMMS(double Lq, double lambda){
        return Lq/lambda;
    }
    // W: Tiempo medio de espera en el sistema MMS
    public double WMMS(double wq, double miu){
        return wq + (1/miu);
    }
    // L: Valor esperado de número de clientes en el sistema MMS
    public double LMMS(double lambda, double w){
        return lambda * w;
    }
    // Pw: Probabilidad de que un nuevo cliente tenga que esperar MMS
    public double PwMMS(double lambda, double miu, int servidores, double Po, double intencidadDeTrafico){
        return (Math.pow((lambda/miu), servidores))*((Po)/(factorial(servidores).doubleValue()*(1-intencidadDeTrafico)));
    }
    // Pn: calculo de la probabilidad que n vehículos estén en el sistema
    public void PnMMS(double lambda, double miu, int servidores, double Po, double n, int cifrasSignificativas){
        double Pn = 0;
        TextAreaProbabilidades.setText("");
        TextAreaProbabilidades.append("P0 = " + Po + " => " + redondearDecimales((Po*100),cifrasSignificativas) + "%\n");
        for(int i = 1; i <= n; i++){
            if(i <= servidores){
                Pn = redondearDecimales(((Math.pow((lambda/miu), i)*Po)/(factorial(i).doubleValue())), cifrasSignificativas);
                TextAreaProbabilidades.append("P"+ i +" = " + Pn + " => " + redondearDecimales((Pn*100),cifrasSignificativas) + "%\n");
            }else{
                Pn = redondearDecimales(((Math.pow((lambda/miu), i)*Po)/(factorial(servidores).doubleValue()*Math.pow(servidores, (i-servidores)))), cifrasSignificativas);
                TextAreaProbabilidades.append("P"+ i +" = " + Pn + " => " + redondearDecimales((Pn*100),cifrasSignificativas) + "%\n");
            }
        }
    }
    // Redondeo de cifras significativas de número
     public double redondearDecimales(double valorInicial, int numeroDecimales) {
        double parteEntera, resultado;
        resultado = valorInicial;
        parteEntera = Math.floor(resultado);
        resultado=(resultado-parteEntera)*Math.pow(10, numeroDecimales);
        resultado=Math.round(resultado);
        resultado=(resultado/Math.pow(10, numeroDecimales))+parteEntera;
        return resultado;
    }
    // Factorial de un número
    public static BigInteger factorial(int n) {
        BigInteger f = new BigInteger("1");
        for (int i = 1; i <= n; i++) {
            f = f.multiply(new BigInteger(i + ""));
        }
        return f;
    }
    // Poner calculos UI MMS
    public void ponerCalculosUIMMS(double lambda, double miu, int s, int n_vehiculos, int cifrasSignificativas){
        // Se realizan los calculos de Ro, Po, Lq, Wq, W, L, Pw, y P1 .. Pn
        double Ro = redondearDecimales(intencidadDeTraficoMMS(lambda, miu, s), cifrasSignificativas);
        double Po = redondearDecimales(PoMMS(lambda, miu, s, Ro), cifrasSignificativas);
        double Lq = redondearDecimales(LqMMS(lambda, miu, s, Po, Ro), cifrasSignificativas);
        double Wq = redondearDecimales(WqMMS(Lq, lambda), cifrasSignificativas);
        double  W = redondearDecimales(WMMS(Wq, miu), cifrasSignificativas);
        double  L = redondearDecimales(LMMS(lambda, W), cifrasSignificativas);
        double Pw = redondearDecimales(PwMMS(lambda, miu, s, Po, Ro), (cifrasSignificativas-2));
        // Se ponen los valores en la UI
        Label_L.setText(String.valueOf(L));
        Label_Lq.setText(String.valueOf(Lq));
        Label_W.setText(String.valueOf(W));
        Label_Wq.setText(String.valueOf(Wq));
        Label_Ro.setText(String.valueOf(Ro));
        Label_Pw.setText(String.valueOf(Pw) + " => " + String.valueOf(Pw*100) + "%");
        PnMMS(lambda, miu, s, Po, n_vehiculos, 4);
        double ocupación = Math.round(L) - Math.round(Lq);
        Label_Estado.setText((int)ocupación +"/" + String.valueOf(s));
        double delta = (double)s/5.0; // Cinco estados visuales para ver ocupación del parqueadero
        //System.out.println("o: "+ocupación + " d: "+ delta);
        if(ocupación >=0 && ocupación <= delta){ // Libre
            //System.out.println("Libre");
            Label_Estado.setBackground(new Color(0, 153, 0));
        }else if(ocupación >delta && ocupación <= 2*delta){ // Con varios cupos
            //System.out.println("Con cupos");
            Label_Estado.setBackground(new Color(0, 204, 204));
        }else if(ocupación > 2*delta && ocupación <= 3*delta){ // A la mitad de cupos
            //System.out.println("A la mitad");
            Label_Estado.setBackground(new Color(255, 255, 0));
        }else if(ocupación > 3*delta && ocupación <= 5*delta){ // Casi lleno
            //System.out.println("Casi lleno");
            Label_Estado.setBackground(new Color(255, 102, 51));
        }else{ // Lleno completamente
            //System.out.println("Lleno");
            Label_Estado.setBackground(new Color(255, 0, 51));
        }
        
    }
    // Crear simulaciónMMS .txt
    public void crearSimulacionTxtMMS(double s, double l, double m, double Ro, double L,double Lq, double W, double Wq, double Po, double Pw){
        BufferedWriter bw = null;
        FileWriter fw = null;
        
        String FILENAME = "./DatosSimUnSoloParqueaderoMMS.txt";

        try {
            String data = s+" "+l+" "+m+" "+Ro+" "+L+" "+Lq+" "+W+" "+Wq+" "+Po+" "+Pw + "\n";

            File file = new File(FILENAME);

            // si el archivo no existe lo crea.
            if (!file.exists()) {
                file.createNewFile();
            }

            // true = concatena lo que hay en el archivo + nueva línea
            fw = new FileWriter(file.getAbsoluteFile(), true);
            bw = new BufferedWriter(fw);

            bw.write(data);

            //System.out.println("Done");

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (bw != null)
                        bw.close();

                if (fw != null)
                        fw.close();

            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    // Limpiar archivo simulaciónMMS .txt
    public void limpiarSimulacionTxtMMS(){
        
        FileWriter fw = null;
        
        String FILENAME = "./DatosSimUnSoloParqueaderoMMS.txt";

        try {
            String data = "";

            File file = new File(FILENAME);

            // si el archivo no existe lo crea.
            if (!file.exists()) {
                file.createNewFile();
            }

            // Limpia todo el archivo file con data ""
            fw = new FileWriter(file);
            fw.write(data);
            fw.flush();

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fw != null)
                    fw.close();

            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimUnSoloParqueadero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimUnSoloParqueadero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimUnSoloParqueadero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimUnSoloParqueadero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SimUnSoloParqueadero dialog = new SimUnSoloParqueadero(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonSimular;
    private javax.swing.JButton ButtonSimularTodoMMS;
    private javax.swing.JLabel Label_Estado;
    private javax.swing.JLabel Label_L;
    private javax.swing.JLabel Label_Lq;
    private javax.swing.JLabel Label_Pw;
    private javax.swing.JLabel Label_Ro;
    private javax.swing.JLabel Label_W;
    private javax.swing.JLabel Label_Wq;
    private javax.swing.ButtonGroup RBGTipoSimulacion;
    private javax.swing.JRadioButton RBGrande;
    private javax.swing.JRadioButton RBMediano;
    private javax.swing.JRadioButton RBPequeño;
    private javax.swing.JRadioButton RBmms;
    private javax.swing.ButtonGroup RGBTipoParqueadero;
    private javax.swing.JSpinner SpinnerLambda;
    private javax.swing.JSpinner SpinnerMiu;
    private javax.swing.JSpinner SpinnerN;
    private javax.swing.JTextArea TextAreaProbabilidades;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
