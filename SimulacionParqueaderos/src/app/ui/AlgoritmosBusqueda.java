
package app.ui;

import com.orsoncharts.util.json.JSONArray;
import com.orsoncharts.util.json.JSONObject;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;


public class AlgoritmosBusqueda extends javax.swing.JDialog {
    // Variable para crear un parqueadero
    private double latitud, longitud;
    private int ofertas, servicios, llaves, valor;
    private long t1, t2, t3; // Guardan los tiempos que consume cada algoritmo en procesar la información
    private boolean hayParqueaderos = false;
    // variables configurables por el usuario para buscar un parqueadero de interés
    private double latitud_des, longitud_des, tolerancia_des;
    private int cercania, ofertas_des, servicios_des, llaves_des, valor_des;
    // A: 4.78925, -74.09591
    // B: 4.80294, -74.0324
    // C: 4.5374, -74.08733
    // D: 4.61714, -74.20028
    double[] vertx = { 4.78925, 4.80294, 4.5374, 4.61714 };
    double[] verty = { -74.09591, -74.0324, -74.08733, -74.20028 };
    // Intancia para controlar accesos a la base de datos
    GestionBD gbd;
    // Lista de parqueaderos
    ArrayList<ParqueaderoSIM> parqueaderos;
    // Lista de tiempos por sesión de las busquedas realizadas
    ArrayList<TiemposAlgoritmos> tiempos;
    // Modelo para la jTable
    private DefaultTableModel modeloTabla; 
    // Ruta para guardar los archivos jSON
    private String RUTA = "/Applications/XAMPP/xamppfiles/htdocs/apparcar/";
   
    public AlgoritmosBusqueda(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         // Ubica en el centro la ventana por defecto
        this.setLocationRelativeTo(null);
        // Instancia la clase para manejar las conexiones a la base de datos
        gbd = new GestionBD();
        // Se crea el contenedor de todos los parqueaderos a analizar
        parqueaderos = new ArrayList();
        // Se crea el contenedor con todos los tiempos que se desean analizar
        tiempos = new ArrayList(); 
        // Inicializamos el modelo de la Tabla con tres columnas de tiempos
        modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("T. Binaria (ms)");
        modeloTabla.addColumn("T. Lineal (ms)");
        modeloTabla.addColumn("T. Bin. Server (ms)");
        jTable2.setModel(modeloTabla);
        // centra el encabezado de la Tabla
        ((DefaultTableCellRenderer) jTable2.getTableHeader().getDefaultRenderer())
            .setHorizontalAlignment(JLabel.CENTER); // header to center
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable2.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        
        // Se ponen valores por defecto para un parqueadero
        ponerValoresParqueaderoPorDefecto();
        ponerValoresParqueaderoInteresPorDefecto();
        
        // Pone la cantidad de parqueaderos que hay en el sistema
        jLabel19.setText("Nº Parqueaderos: "+String.valueOf(gbd.obtenerCantidadDeParqueaderos()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupAlgoritmosBusqueda = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel17 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jRadioButtonBLineal = new javax.swing.JRadioButton();
        jRadioButtonBBinaria = new javax.swing.JRadioButton();
        jRadioButtonBLambda = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jButton9 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Algoritmos de Búsqueda");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Creación de Parqueaderos", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Automática"));

        jLabel2.setText("Parqueaderos a generar:");

        jButton2.setText("Generar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 0, 1000, 10));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButton2)
                .addGap(6, 6, 6))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton2)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Manual"));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Latitud:");

        jTextField1.setText("4.658892");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Longitud:");

        jTextField2.setText("-74.074516");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Precio:");

        jSlider1.setMaximum(105);
        jSlider1.setMinimum(10);
        jSlider1.setMinorTickSpacing(5);
        jSlider1.setPaintLabels(true);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("$105.0");

        jCheckBox1.setText("Con Ofertas");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Con Servicios");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.setText("Dejar Llaves");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jButton3.setText("Restablecer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("GPS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Estado: Normal");

        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Nº Parqueaderos: 0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jCheckBox3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButton4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel19)
                    .addComponent(jLabel17))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Análisis de los Algoritmos de Búsqueda", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración"));

        jLabel1.setText("Cargar");

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(100, 0, 1000000, 100));

        jLabel3.setText("Parqueaderos");

        jLabel8.setText("Algoritmo:");

        buttonGroupAlgoritmosBusqueda.add(jRadioButtonBLineal);
        jRadioButtonBLineal.setSelected(true);
        jRadioButtonBLineal.setText("b. lineal");

        buttonGroupAlgoritmosBusqueda.add(jRadioButtonBBinaria);
        jRadioButtonBBinaria.setText("b. binaria");

        buttonGroupAlgoritmosBusqueda.add(jRadioButtonBLambda);
        jRadioButtonBLambda.setText("b. bin. Server");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonBLineal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonBBinaria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonBLambda)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jRadioButtonBBinaria)
                    .addComponent(jRadioButtonBLineal)
                    .addComponent(jLabel8)
                    .addComponent(jRadioButtonBLambda))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del parqueadero de interés"));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Lat. Dest:");

        jTextField3.setText("4.658892");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Lon. Dest:");

        jTextField4.setText("-74.074516");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Precio:");

        jSlider2.setMaximum(105);
        jSlider2.setMinimum(10);
        jSlider2.setMinorTickSpacing(5);
        jSlider2.setPaintLabels(true);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("$105.0");

        jCheckBox5.setText("Con Ofertas");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jCheckBox6.setText("Con Servicios");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });

        jCheckBox7.setText("Sin Dejar Llaves");
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });

        jButton9.setText("GPS");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel13.setText("Cercanía:");

        jLabel14.setText("mts");

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(50, 0, 1000, 50));
        jSpinner3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner3StateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jCheckBox5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox7))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButton9)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox7))
                .addContainerGap())
        );

        jButton7.setText("Buscar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton6.setText("Restablecer");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/imagenes/chart_default.jpeg"))); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Tiempos de búsqueda según algoritmo implementado"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "T. Lineal", "T. Binaria", "T. Lambda"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Mejor promedio:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected()){
            ofertas = 1;
        }else{
            ofertas = 0;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if(jCheckBox2.isSelected()){
            servicios = 1;
        }else{
            servicios = 0;
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        valor = (int)jSlider1.getValue();
        jLabel7.setText("$"+valor);
    }//GEN-LAST:event_jSlider1StateChanged

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if(jCheckBox3.isSelected()){
            llaves = 1;
        }else{
            llaves = 0;
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed
    // Guarda el parqueadero en la base de datos de parqueaderos
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabel17.setText("Estado: Ocupado ...");
        String msj = "El parqueadero que desea crear no está en una zona permitida";
        
        if(jTextField1.getText().equals("") || jTextField2.getText().equals("")){
            // Error de campos en blanco
            JOptionPane.showMessageDialog(null, msj, "Error latitud-longitud", JOptionPane.ERROR_MESSAGE);
        }else{
            latitud = Double.parseDouble(jTextField1.getText());
            longitud = Double.parseDouble(jTextField2.getText());
            if(!puntoEnPoligono(4, vertx, verty, latitud, longitud)){
                // verifica si esta en una zona permitida para crear un parqueadero
                JOptionPane.showMessageDialog(null, msj, "Error latitud-longitud", JOptionPane.ERROR_MESSAGE);
            }else{
                // Almacena el parqueadero en la Base de Datos
                gbd.insertarParqueaderoSimulacionesBD(latitud, longitud, valor, ofertas, servicios, llaves);
                //System.out.println("null, "+latitud+", "+longitud+", "+valor+", "+ofertas+", "+servicios+", "+llaves);
                JOptionPane.showMessageDialog(null, "Parqueadero ingresado con éxito.", "Vamos Bien!", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        // Actualiza la cantidad de parqueaderos en el sistema
        jLabel19.setText("Nº Parqueaderos: "+String.valueOf(gbd.obtenerCantidadDeParqueaderos()));
        jLabel17.setText("Estado: Normal");
    }//GEN-LAST:event_jButton1ActionPerformed
    // Botón generar y guardar parqueaderos automáticamente
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jLabel17.setText("Estado: Ocupado ...");
        boolean esta = false;
        double lat = 0, lon = 0;
        int v = 0, o = 0, s = 0, ll = 0;
        String msj = "El número mínimo de parqueaderos es de: "+ ((int)((SpinnerNumberModel) jSpinner1.getModel()).getMinimum()+1)+"\n"
                + "y él máximo es de: "+ (int)((SpinnerNumberModel) jSpinner1.getModel()).getMaximum()+" por iteración.";

        if((int) jSpinner1.getValue() <= 0){
            // verifica que no se vayan a crear más de N parqueaderos permitidos
            JOptionPane.showMessageDialog(null, msj, "Error de cantidad", JOptionPane.ERROR_MESSAGE);
        }else{
            // Se generán N parqueaderos con las características parametrizadas
            for(int i= 0; i < (int) jSpinner1.getValue(); i++){
                // Se generá y valida latitud y longitud
                while(!esta){
                    lat = getRandomDecimal(4.8, 4.53); // Se generá una latitud
                    lon = getRandomDecimal(-74.03, -74.2); // Se generá una longitud
                    esta = puntoEnPoligono(4, vertx, verty, lat, lon);
                }
                esta = !esta;
                v = getRandomEntero(10, 105); // Se generá un precio
                o = getRandomEntero(0, 1);    // Se generá oferta
                s = getRandomEntero(0, 1);    // Se generá servicio
                ll = getRandomEntero(0, 1);   // Se generá llaves

                // Almacena el parqueadero en la Base de Datos por iteración i
                gbd.insertarParqueaderoSimulacionesBD(lat, lon, v, o, s, ll);
                //System.out.println(" "+lat+" "+lon+" "+v+" "+o+" "+s+" "+ll);
            }
        }
        JOptionPane.showMessageDialog(null, "Parqueadero(s) ingresado(s) con éxito.", "Vamos Bien!", JOptionPane.INFORMATION_MESSAGE);
        // Actualiza la cantidad de parqueaderos en el sistema
        jLabel19.setText("Nº Parqueaderos: "+String.valueOf(gbd.obtenerCantidadDeParqueaderos()));
        jLabel17.setText("Estado: Normal");
    }//GEN-LAST:event_jButton2ActionPerformed
    // Botón restablecer crear parqueaderos
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ponerValoresParqueaderoPorDefecto();
    }//GEN-LAST:event_jButton3ActionPerformed
    // Botón cargar coordenada GPS
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        boolean esta = false;
        double lat = 0, lon = 0;
        // Se generá y valida latitud y longitud
        while(!esta){
            lat = getRandomDecimal(4.8, 4.53); // Se generá una latitud
            lon = getRandomDecimal(-74.03, -74.2); // Se generá una longitud
            esta = puntoEnPoligono(4, vertx, verty, lat, lon);
        }
        jTextField1.setText(String.valueOf(lat));
        jTextField2.setText(String.valueOf(lon));
    }//GEN-LAST:event_jButton4ActionPerformed
    // Botón analizar algoritmos
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       jLabel17.setText("Estado: Ocupado ...");
       ArrayList<ParqueaderoSIM> p_trabajo= new ArrayList();
       String msj = "El número mínimo de parqueaderos es de: "+ ((int)((SpinnerNumberModel) jSpinner2.getModel()).getMinimum()+1)+"\n"
                + "y él máximo es de: "+ (int)((SpinnerNumberModel) jSpinner2.getModel()).getMaximum()+" por análisis.";
       int cargar = (int) jSpinner2.getValue();
       // Capturamos la latitud y la longitud de interes de los campos de texto
       latitud_des = Double.parseDouble(jTextField3.getText());
       longitud_des = Double.parseDouble(jTextField4.getText());
       // Elimino todos los parqueaderos
       parqueaderos.clear();
       p_trabajo.clear();
       // Trae los parqueaderos de la base de datos
       parqueaderos = gbd.obtenerParqueaderosSimulacionesBD();
       System.out.println("Parqueaderos totales: "+parqueaderos.size());
       
       if( cargar <= 0){
           // verifica que no se vayan a cargar más de N parqueaderos permitidos
           JOptionPane.showMessageDialog(null, msj, "Error de cantidad", JOptionPane.ERROR_MESSAGE);
       }else{
            // Los primeros N parqueaderos
            for(int i = 0; i < cargar; i++){
                p_trabajo.add(parqueaderos.get(i));
            }
                   
            // Guardar el archivo json con la cantidad de parqueaderos de trabajo
            crearArchivoJSON(p_trabajo, "parqueaderos_trabajo");
            System.out.println("Parqueaderos seleccionados: "+p_trabajo.size()); 
            //System.out.println("===== AQUI IMPRIMO LOS PARQUEADEROS DE TRABAJO =====");
            //imprimirParqueaderos(p_trabajo);
            //System.out.println(" ===== AQUI FINALIZA LA IMPRESION LOS PARQUEADEROS DE TRABAJO =====");
            System.out.println("Parqueadero interés: "+latitud_des+" "+longitud_des+" "+cercania+" "+valor_des+" "+tolerancia_des+" "+ofertas_des+" "+servicios_des+" "+llaves_des);
            
            // Se aplican los algoritmos
            try {
                 busquedaLineal(p_trabajo, latitud_des, longitud_des, cercania, valor_des, ofertas_des, servicios_des, llaves_des);
                 busquedaBinaria(latitud_des, longitud_des, cercania, valor_des, ofertas_des, servicios_des, llaves_des);
                 busquedaLambda(p_trabajo, latitud_des, longitud_des, cercania, valor_des, ofertas_des, servicios_des, llaves_des);
                 
                 // Actualizar la Tabla de Tiempos si encuentra Parqueaderos
                 if(hayParqueaderos){
                    // Se almacenan los tiempos
                    // t1: Lineal, t2: Binaria, t3: Lambda
                    TiemposAlgoritmos t = new TiemposAlgoritmos(t1, t2, t3);
                    tiempos.add(t);
                    actualizarTablaDeDatos();
                    mejorPromedio();
                 }else{
                    // Mostrar mensaje de que no encontro parqueaderos
                    JOptionPane.showMessageDialog(null, "No se encontraron parqueaderos.", "Lo sentimos ...", JOptionPane.INFORMATION_MESSAGE);
                 }
            } catch (IOException ex) {
                Logger.getLogger(AlgoritmosBusqueda.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       jLabel17.setText("Estado: Normal");
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        valor_des = (int)jSlider2.getValue();
        jLabel12.setText("$"+valor_des);
    }//GEN-LAST:event_jSlider2StateChanged

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        if(jCheckBox5.isSelected()){
            ofertas_des = 1;
        }else{
            ofertas_des = 0;
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        if(jCheckBox6.isSelected()){
            servicios_des = 1;
        }else{
            servicios_des = 0;
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        if(jCheckBox7.isSelected()){
            llaves_des = 1;
        }else{
            llaves_des = 0;
        }
    }//GEN-LAST:event_jCheckBox7ActionPerformed
    // Genera coordenada GPS para el parqueadero de interes
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        boolean esta = false;
        double lat = 0, lon = 0;
        // Se generá y valida latitud y longitud
        while(!esta){
            lat = getRandomDecimal(4.8, 4.53); // Se generá una latitud
            lon = getRandomDecimal(-74.03, -74.2); // Se generá una longitud
            esta = puntoEnPoligono(4, vertx, verty, lat, lon);
        }
        latitud_des = lat;
        longitud_des = lon;
        jTextField3.setText(String.valueOf(latitud_des));
        jTextField4.setText(String.valueOf(longitud_des));
    }//GEN-LAST:event_jButton9ActionPerformed
    // Botón restablecer configuraciones y parqueadero de interés
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ponerValoresParqueaderoInteresPorDefecto();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jSpinner3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner3StateChanged
        cercania = (int) jSpinner3.getValue();
    }//GEN-LAST:event_jSpinner3StateChanged
    // Se ponen los valores nuevamente por defecto para la carga manual
    private void ponerValoresParqueaderoPorDefecto(){

        jSpinner1.setValue(1);
        latitud = 4.658892;
        jTextField1.setText(String.valueOf(latitud));
        longitud = -74.074516;
        jTextField2.setText(String.valueOf(longitud));
        valor = 60;
        ofertas = 0;
        jCheckBox1.setSelected(false);
        servicios = 0;
        jCheckBox2.setSelected(false);
        llaves = 0;
        jCheckBox3.setSelected(false);
        jSlider1.setValue(valor);
        jLabel17.setText("Estado: Normal");
    }
    // Se ponen los valores nuevamente por defecto para el parqueadero de interes
    private void ponerValoresParqueaderoInteresPorDefecto(){
        
        // Configuraciones de la carga de parqueaderos
        jSpinner2.setValue(1);
        jRadioButtonBLineal.setSelected(true);
        jRadioButtonBBinaria.setSelected(false);
        // parqueadero de interés
        latitud_des = 4.658892;
        jTextField3.setText(String.valueOf(latitud));
        longitud_des = -74.074516;
        jTextField4.setText(String.valueOf(longitud));
        cercania = 50;
        jSpinner3.setValue(cercania);
        tolerancia_des = 0;
        valor_des = 60;
        ofertas_des = 0;
        jCheckBox5.setSelected(false);
        servicios_des = 0;
        jCheckBox6.setSelected(false);
        llaves_des = 0;
        jCheckBox7.setSelected(false);
        jSlider2.setValue(valor_des);
        jLabel15.setText("Mejor promedio:");
        
        // Poner la imagen por defecto
        ImageIcon icon = new ImageIcon("./src/app/imagenes/chart_default.jpeg");
        icon.getImage().flush(); // Limpia la imagen en mem cache
        jLabel18.setIcon(icon);
        jLabel18.setText("");
        // Pone la leyenda de estado en normal de nuevo
        jLabel17.setText("Estado: Normal");

        // Limpia la tabla para dejarla sin valores
        while (modeloTabla.getRowCount() > 0) 
        {
            modeloTabla.removeRow(0);
        }
    }
    // calcula el algoritmo com mejor promedio de tiempos hasta el momento
    public void mejorPromedio(){
        int s_t1=0, s_t2=0, s_t3=0;
        double p_t1, p_t2, p_t3;
        for(TiemposAlgoritmos t: tiempos){
            s_t1 += t.getT_algoritmo_1();
            s_t2 += t.getT_algoritmo_2();
            s_t3 += t.getT_algoritmo_3();
        }
        p_t1 = (double)(s_t1/tiempos.size());
        p_t2 = (double)(s_t2/tiempos.size());
        p_t3 = (double)(s_t3/tiempos.size());
        if(p_t1 <= p_t2 && p_t1 <= p_t3){
            jLabel15.setText("Mejor promedio: T. Lineal"); // Mejor promedio para el algoritmo lineal
        }else if(p_t2 <= p_t1 && p_t2 <= p_t3){
            jLabel15.setText("Mejor promedio: T. Binaria"); // Mejor promedio para el algoritmo binaria
        }else if(p_t3 <= p_t1 && p_t3 <= p_t2){
            jLabel15.setText("Mejor promedio: T. Lambda"); // Mejor promedio para el algoritmo binaria
        }
    }
    // Crear archivo JSON 
    public void crearArchivoJSON(ArrayList<ParqueaderoSIM> array, String nombre) {
        JSONArray jr = new JSONArray();
        array.stream().map((parqueadero) -> {
            JSONObject obj = new JSONObject();
            obj.put("idParqueadero", parqueadero.getIdParqueadero());
            obj.put("latitud", parqueadero.getLatitud());
            obj.put("longitud", parqueadero.getLongitud());
            obj.put("valor", parqueadero.getValor());
            obj.put("ofertas", parqueadero.getOfertas());
            obj.put("servicios", parqueadero.getServicios());
            obj.put("llaves", parqueadero.getLlaves());
            obj.put("porcentaje", parqueadero.getPorcentaje());
            return obj;
        }).forEach((obj) -> {
            jr.add(obj);
        });
        
        //System.out.print(jr);
        
        try (FileWriter file = new FileWriter(RUTA+nombre+".json")) {
            jr.writeJSONString(file);
            file.flush();
        } catch (IOException ex) {
            Logger.getLogger(AlgoritmosBusqueda.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    // Pone los datos en la tabla de tiempos
    public void actualizarTablaDeDatos(){
        
        // Limpia la tabla para dejarla sin valores
        while (modeloTabla.getRowCount() > 0) 
        {
            modeloTabla.removeRow(0);
        }
        
        // Añade todos los tiempos por filas
        for(TiemposAlgoritmos t: tiempos){
            modeloTabla.addRow(new Object[]{
                t.getT_algoritmo_1(), t.getT_algoritmo_2(), t.getT_algoritmo_3()
            });
        }
         
    }
    // Búsqueda Lineal
    public void busquedaLineal(ArrayList p_trabajo, double lat, double lon, int cercania, int precio, int oferta, int servicio, int llave) throws IOException{
        
        long time_start, time_end; // Inicia la captura del tiempo
        time_start = System.currentTimeMillis();
        
        ArrayList<ParqueaderoSIM> p_filtrados = new ArrayList();
        double d_km = (double)(cercania / 1000.0);
        double d;
        // Borra el array de elementos filtrados
        p_filtrados.clear();
        //System.out.println("distancia: " + d_km);
        // ( 6371 * acos( cos( radians(37) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * sin( radians( lat ) ) ) )
        for (Iterator it = p_trabajo.iterator(); it.hasNext();) {
            ParqueaderoSIM parqueadero = (ParqueaderoSIM) it.next();
            // Formúla de la distancia del arcoseno
            d = (6371 * Math.acos( Math.cos(Math.toRadians(lat)) * Math.cos(Math.toRadians(parqueadero.getLatitud())) * Math.cos( Math.toRadians(parqueadero.getLongitud()) - Math.toRadians(lon)) + Math.sin(Math.toRadians(lat)) * Math.sin( Math.toRadians(parqueadero.getLatitud()))));
            
            if(d <= d_km){
                //System.out.println("d: "+d+"d_km: "+d_km);
                
                parqueadero.setPorcentaje(0); // Limpio el campo porcentaje para poder re-calcular
                parqueadero.setPorcentaje(20); // se le asigna un 20% por cumplir por cercanía
                if(precio <= parqueadero.getValor()){
                    parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir el precio menor o igual al deseado por el usuario
                }
                if(oferta == 1 && parqueadero.getOfertas() == 1){
                    parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por oferta
                }
                if(servicio == 1 && parqueadero.getServicios() == 1){
                    parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por servicio
                }
                if(llave == 1 && parqueadero.getLlaves() == 1){
                    parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por llave
                }
                
                p_filtrados.add(parqueadero);
            }
        }
        time_end = System.currentTimeMillis();
        t1 = time_end - time_start; // Termina la captura del tiempo
        
        System.out.println("Tiempo Lineal: "+ t1 +" milisegundos");

        // Se muestra el grafico con los parqueaderos encontrados y su características
        if(jRadioButtonBLineal.isSelected()){
            hacerGrafico(p_filtrados, "LINEAL");
            // Crea el archivo con los parqueaderos filtrados
            crearArchivoJSON(p_filtrados, "parqueaderos_filtrados");
        }
        
        
        // Verificar si se encontraron parqueaderos
        hayParqueaderos = p_filtrados.size()>0;

        System.out.println("Filtrados Lineal: "+p_filtrados.size());
        imprimirParqueaderos(p_filtrados);
    }
    // Búsqueda Binaria
    public void busquedaBinaria(double lat, double lon, int cercania, int precio, int oferta, int servicio, int llave) throws IOException{
        
        long time_start, time_end; // Inicia la captura del tiempo
        time_start = System.currentTimeMillis();
        
        ArrayList<ParqueaderoSIM> p_filtrados;
        double d_km = (double)(cercania / 1000.0);
        //double d = 0.0;
        
        p_filtrados = gbd.obtenerParqueaderosFiltradosLatLonBD(lat, lon, d_km, (int) jSpinner2.getValue());
        
        for(ParqueaderoSIM parqueadero : p_filtrados){
            parqueadero.setPorcentaje(0);  // Limpio el campo porcentaje para poder re-calcular
            parqueadero.setPorcentaje(20); // se le asigna un 20% por cumplir por cercanía
            if(precio <= parqueadero.getValor()){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir el precio menor o igual al deseado por el usuario
            }
            if(oferta == 1 && parqueadero.getOfertas() == 1){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por oferta
            }
            if(servicio == 1 && parqueadero.getServicios() == 1){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por servicio
            }
            if(llave == 1 && parqueadero.getLlaves() == 1){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por llave
            }
        }
        time_end = System.currentTimeMillis(); // Termina la captura del tiempo
        t2 = time_end - time_start;
        System.out.println("Tiempo Binaria: "+ t2 +" milisegundos");
        
        // Se muestra el grafico con los parqueaderos encontrados y su características
        if(jRadioButtonBBinaria.isSelected()){
            hacerGrafico(p_filtrados, "BINARIA");
            // Crea el archivo con los parqueaderos filtrados
            crearArchivoJSON(p_filtrados, "parqueaderos_filtrados");
        }
        
        // Verificar si se encontraron parqueaderos
        hayParqueaderos = p_filtrados.size()>0;
        
        System.out.println("Filtrados Binaria: "+p_filtrados.size());
        imprimirParqueaderos(p_filtrados);
        
    }
    // Busqueda Lambda
    public void busquedaLambda(ArrayList p_trabajo, double lat, double lon, int cercania, int precio, int oferta, int servicio, int llave)throws IOException{
        
        long time_start, time_end; // Inicia la captura del tiempo
        time_start = System.currentTimeMillis();
        
        List<ParqueaderoSIM> p_trab_list;
        double d_km = (double)(cercania / 1000.0);
        p_trab_list = p_trabajo;

        List<ParqueaderoSIM> p_filtrados = p_trab_list.stream().filter(u -> ( (6371 * Math.acos( Math.cos(Math.toRadians(lat)) * Math.cos(Math.toRadians(u.getLatitud())) * Math.cos( Math.toRadians(u.getLongitud()) - Math.toRadians(lon)) + Math.sin(Math.toRadians(lat)) * Math.sin( Math.toRadians(u.getLatitud())))) <= d_km)).collect(Collectors.toList());
        
        for (ParqueaderoSIM parqueadero : p_filtrados) {
            parqueadero.setPorcentaje(0);  // Limpio el campo porcentaje para poder re-calcular
            parqueadero.setPorcentaje(20); // se le asigna un 20% por cumplir por cercanía
            if(precio <= parqueadero.getValor()){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir el precio menor o igual al deseado por el usuario
            }
            if(oferta == 1 && parqueadero.getOfertas() == 1){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por oferta
            }
            if(servicio == 1 && parqueadero.getServicios() == 1){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por servicio
            }
            if(llave == 1 && parqueadero.getLlaves() == 1){
                parqueadero.setPorcentaje(parqueadero.getPorcentaje()+20); // 20% adicional por cumplir por llave
            }
        }
        
        time_end = System.currentTimeMillis(); // Termina la captura del tiempo
        t3 = time_end - time_start;
        System.out.println("Tiempo Lambda: "+ t3 +" milisegundos");
        
        // Se muestra el grafico con los parqueaderos encontrados y su características
        if(jRadioButtonBLambda.isSelected()){
            hacerGrafico((ArrayList) p_filtrados, "LAMBDA");
            // Crea el archivo con los parqueaderos filtrados
            crearArchivoJSON((ArrayList<ParqueaderoSIM>) p_filtrados, "parqueaderos_filtrados");
        }
        
        // Verificar si se encontraron parqueaderos
        hayParqueaderos = p_filtrados.size()>0;
       
        System.out.println("Filtrados Lambda: "+p_filtrados.size());
        imprimirParqueaderos((ArrayList) p_filtrados);

    }
    // Imprimir parqueaderos
    public void imprimirParqueaderos(ArrayList p){
        System.out.println("==== IMPRESIÓN ====");
         for (Iterator it = p.iterator(); it.hasNext();) {
            ParqueaderoSIM parqueadero = (ParqueaderoSIM) it.next();
            //String leyenda = "P_"+parqueadero.getIdParqueadero();
            System.out.print(" "+parqueadero.getIdParqueadero());
            System.out.print(" "+parqueadero.getLatitud());
            System.out.print(" "+parqueadero.getLongitud());
            System.out.print(" "+parqueadero.getValor());
            System.out.print(" "+parqueadero.getOfertas());
            System.out.print(" "+parqueadero.getServicios());
            System.out.print(" "+parqueadero.getLlaves());
            System.out.print(" "+parqueadero.getPorcentaje());
            System.out.println("");
        }
        System.out.println("==== FIN IMPRESIÓN ====");
    }
    // Hacer Grafica
    public void hacerGrafico(ArrayList p_filtrados, String algoritmo) throws IOException{
        
        int i = 1;
        DefaultCategoryDataset dataset = new DefaultCategoryDataset( );
      
        dataset.clear();
               
        for (Iterator it = p_filtrados.iterator(); it.hasNext();) {
            ParqueaderoSIM parqueadero = (ParqueaderoSIM) it.next();
            //String leyenda = "P_"+parqueadero.getIdParqueadero();
            String leyenda = "P"+i;
            dataset.addValue(parqueadero.getPorcentaje() , "Porcentaje total por parqueadero según preferencias de usuario" , leyenda );
            i += 1;
        }
        //JFreeChart barChart = ChartFactory.createBarChart // Normal
        // 3D
        JFreeChart barChart = ChartFactory.createBarChart3D(
         "ESTADíSTICAS DE LOS PARQUEADEROS ENCONTRADOS BúSQUEDA "+algoritmo, 
         "Parqueadero", "Porcentaje (%)", 
         dataset,PlotOrientation.VERTICAL, 
         true, true, false);
        
        int width = 640;    /* Width of the image */
        int height = 480;   /* Height of the image */ 
        
        File BarChart = new File( "./src/app/imagenes/chart.jpeg" ); 
        ChartUtilities.saveChartAsJPEG( BarChart , barChart , width , height );
        // pone la imagen en el label correspondiente
        ImageIcon icon = new ImageIcon("./src/app/imagenes/chart.jpeg");
        icon.getImage().flush(); // Limpia la imagen en mem cache
        jLabel18.setIcon(icon);
        jLabel18.setText("");
    }
    // Verifica si un punto esta dentro de una región de n vertices
    public boolean puntoEnPoligono(int nvert, double[] vertx, double[] verty, double testx, double testy)
    {
      int i, j;
      boolean c = false;
      for (i = 0, j = nvert-1; i < nvert; j = i++) {
        if ( ((verty[i]>testy) != (verty[j]>testy)) &&
         (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )
           c = !c;
      }
      // Retorna true si esta el punto o false si no esta
      return c;
    }
    // Generador de latitudes o longitudes aleatorias
    public static double getRandomDecimal(Double valorMinimo, Double valorMaximo) {
        Random rand = new Random();
        return  valorMinimo + ( valorMaximo - valorMinimo ) * rand.nextDouble();
    }
    // Generador de nuemros enteros (1-0 o $10 a $105)
    public static int getRandomEntero(int valorMinimo, int valorMaximo) {
        return  (int) Math.floor(Math.random()*(valorMaximo-valorMinimo+1)+valorMinimo);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlgoritmosBusqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlgoritmosBusqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlgoritmosBusqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlgoritmosBusqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AlgoritmosBusqueda dialog = new AlgoritmosBusqueda(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupAlgoritmosBusqueda;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButtonBBinaria;
    private javax.swing.JRadioButton jRadioButtonBLambda;
    private javax.swing.JRadioButton jRadioButtonBLineal;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
